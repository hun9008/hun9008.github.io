<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-03-07T21:37:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">console.log(‘HUN’)</title><subtitle>J.Y.Hun's Devlog</subtitle><author><name>Hun</name><email>younghune135@gmail.com</email></author><entry><title type="html">백준 아기 상어 [c++]</title><link href="http://localhost:4000/2024/03/07/16236_babyShark/" rel="alternate" type="text/html" title="백준 아기 상어 [c++]" /><published>2024-03-07T10:18:00+09:00</published><updated>2024-03-07T10:28:25+09:00</updated><id>http://localhost:4000/2024/03/07/16236_babyShark</id><content type="html" xml:base="http://localhost:4000/2024/03/07/16236_babyShark/"><![CDATA[<h1 id="16236-아기-상어-골드-3">16236 아기 상어 골드 3</h1>

<p><a href="https://www.acmicpc.net/problem/16236"> 문제 링크 </a></p>

<h2 id="문제">문제</h2>

<p>N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.</p>

<p>아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고, 아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.</p>

<p>아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.</p>

<p>아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.</p>

<p>더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.
먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.
먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.
거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.
거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.
아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면, 이동과 동시에 물고기를 먹는다. 물고기를 먹으면, 그 칸은 빈 칸이 된다.</p>

<p>아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를 들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.</p>

<p>공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 공간의 크기 N(2 ≤ N ≤ 20)이 주어진다.</p>

<p>둘째 줄부터 N개의 줄에 공간의 상태가 주어진다. 공간의 상태는 0, 1, 2, 3, 4, 5, 6, 9로 이루어져 있고, 아래와 같은 의미를 가진다.</p>

<p>0: 빈 칸
1, 2, 3, 4, 5, 6: 칸에 있는 물고기의 크기
9: 아기 상어의 위치
아기 상어는 공간에 한 마리 있다.</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 아기 상어가 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는 시간을 출력한다.</p>

<h2 id="풀이">풀이</h2>

<p>처음에 문제를 보고 생각한 아이디어는</p>

<ol>
  <li>크기가 i인 물고기가 몇마리 있는지 정보를 저장하는 fish[6] 배열을 선언한다.
    <ul>
      <li>이 배열은 먹이를 먹고 난 후 다음 bfs를 진행할지 결정하는데 이용된다.</li>
      <li>만약 자신의 크기보다 작은 물고기가 없다면 bfs를 종료.</li>
    </ul>
  </li>
  <li>처음 시작 위치에서 bfs를 수행해 조건에 맞는 먹이를 찾아 먹은 후 bfs를 종료하면서 먹은 위치를 return한다.</li>
  <li>그리고 return된 위치에서 종료 조건에 만족하지 않는다면 다시 bfs를 수행한다.</li>
</ol>

<p>그리고 코드를 작성하고 테스트케이스를 확인하니 몇가지 경우에서 예외가 발생했다. 문제는 아기 상어가 먹이를 먹는데, 같은 거리에 있으면 위쪽, 같은 높이라면 가장 왼쪽 먹이를 먹어야 한다.</p>

<p>이 문제를 해결하기 위해 priority_queue를 사용해 먹이의 우선순위를 정해 해결하려고 했다.</p>

<p>테스트케이스는 맞았으나 시간초과가 났다.</p>

<p>이후, 다른 블로그(<a href="https://jangkunstory.tistory.com/139"> 참고 링크 </a>)를 살펴보니 fish배열을 쓰지 않고 visited에 distance를 저장하는 방식으로 풀이하는 코드가 많았다. 이를 참고해 코드를 수정해, 문제를 해결했다.</p>

<h2 id="코드1-오답">코드1 (오답)</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;utility&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">fish</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">sea</span><span class="p">[</span><span class="mi">21</span><span class="p">][</span><span class="mi">21</span><span class="p">];</span>

<span class="kt">int</span> <span class="n">dir</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">+</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">}};</span>

<span class="kt">int</span> <span class="n">visited</span><span class="p">[</span><span class="mi">21</span><span class="p">][</span><span class="mi">21</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">sharkSize</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">growCredit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Compare</span> <span class="p">{</span>
    <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">value_type</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">value_type</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="c1">//second우선, second가 같으면 first.first가 작은 것이 우선 first.first도 같다면 first.second가 작은 것이 우선</span>
        <span class="k">if</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">second</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">first</span> <span class="o">==</span> <span class="n">rhs</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">first</span><span class="p">){</span>
                <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
                <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">first</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
            <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">typedef</span> <span class="n">value_type</span><span class="o">&amp;</span> <span class="n">reference</span><span class="p">;</span>
    <span class="k">typedef</span> <span class="k">const</span> <span class="n">value_type</span><span class="o">&amp;</span> <span class="n">const_reference</span><span class="p">;</span>
    <span class="k">typedef</span> <span class="kt">size_t</span> <span class="n">size_type</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">init</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">fish</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">init_visited</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">print_fish</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"fish : "</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">fish</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">print_sea</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="n">distance</span><span class="p">(</span><span class="kt">int</span> <span class="n">sx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">sy</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ex</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ey</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">ex</span> <span class="o">-</span> <span class="n">sx</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">ey</span> <span class="o">-</span> <span class="n">sy</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">pair</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">bfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// priority_queue&lt;pair&lt;pair&lt;int, int&gt;, int&gt; &gt; q;</span>
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="p">,</span> <span class="n">Compare</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>

    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">nowX</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">first</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">nowY</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">first</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">move</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
        <span class="n">visited</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

        <span class="k">if</span><span class="p">(</span><span class="n">sea</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">sea</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">6</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">sea</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">sharkSize</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">fish</span><span class="p">[</span><span class="n">sea</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]]</span><span class="o">--</span><span class="p">;</span>
                <span class="n">sea</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="c1">// cout &lt;&lt; "eat : " &lt;&lt; nowX &lt;&lt; " " &lt;&lt; nowY &lt;&lt; " sharkSize : " &lt;&lt; sharkSize &lt;&lt; endl;</span>
                <span class="c1">// print_sea(n);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">growCredit</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">growCredit</span><span class="o">--</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
                    <span class="n">sharkSize</span><span class="o">++</span><span class="p">;</span>
                    <span class="n">growCredit</span> <span class="o">=</span> <span class="n">sharkSize</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">make_pair</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">nowX</span><span class="p">,</span> <span class="n">nowY</span><span class="p">),</span> <span class="n">move</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">sea</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">sharkSize</span><span class="p">){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nX</span> <span class="o">=</span> <span class="n">nowX</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">nY</span> <span class="o">=</span> <span class="n">nowY</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">nX</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nX</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">nY</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nY</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">visited</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">sea</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">sharkSize</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">nX</span><span class="p">,</span> <span class="n">nY</span><span class="p">),</span> <span class="n">move</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">make_pair</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">init</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">startX</span><span class="p">,</span> <span class="n">startY</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">6</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">fish</span><span class="p">[</span><span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">9</span><span class="p">){</span>
                <span class="n">startX</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="n">startY</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">uCan</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">// cout &lt;&lt; "where\n";</span>
    <span class="k">while</span><span class="p">(</span><span class="n">uCan</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">init_visited</span><span class="p">();</span>
        <span class="kt">bool</span> <span class="n">can</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">maxFish</span> <span class="o">=</span> <span class="n">sharkSize</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">maxFish</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">){</span>
            <span class="n">maxFish</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxFish</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">fish</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">can</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// cout &lt;&lt; "can : " &lt;&lt; can &lt;&lt; endl;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">can</span> <span class="o">==</span> <span class="nb">false</span><span class="p">){</span>
            <span class="n">uCan</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
            <span class="n">pair</span><span class="o">&lt;</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">next</span><span class="p">;</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">bfs</span><span class="p">(</span><span class="n">startX</span><span class="p">,</span> <span class="n">startY</span><span class="p">);</span>
            <span class="c1">// dis += distance(startX, startY, next.first, next.second);</span>
            <span class="n">dis</span> <span class="o">+=</span> <span class="n">next</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
            <span class="c1">// cout &lt;&lt; "dis : " &lt;&lt; dis &lt;&lt; endl;</span>
            <span class="c1">// cout &lt;&lt; endl;</span>
            <span class="n">startX</span> <span class="o">=</span> <span class="n">next</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
            <span class="n">startY</span> <span class="o">=</span> <span class="n">next</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// cout &lt;&lt; "sharkSize : " &lt;&lt; sharkSize &lt;&lt; endl;</span>
        <span class="c1">// print_fish();</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">dis</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="코드2-정답">코드2 (정답)</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;utility&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">fish</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">sea</span><span class="p">[</span><span class="mi">21</span><span class="p">][</span><span class="mi">21</span><span class="p">];</span>

<span class="kt">int</span> <span class="n">dir</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">+</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">}};</span>

<span class="kt">int</span> <span class="n">visited</span><span class="p">[</span><span class="mi">21</span><span class="p">][</span><span class="mi">21</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">sharkSize</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">growCredit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">sec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">ate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">init</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">fish</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">init_visited</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">21</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">print_sea</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="n">bfs</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// priority_queue&lt;pair&lt;pair&lt;int, int&gt;, int&gt; &gt; q;</span>
    <span class="n">init_visited</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">dis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">nowX</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">nowY</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

        <span class="k">if</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">==</span> <span class="n">dis</span><span class="p">){</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nX</span> <span class="o">=</span> <span class="n">nowX</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">nY</span> <span class="o">=</span> <span class="n">nowY</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">nY</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nY</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">nX</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nX</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">sea</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]</span> <span class="o">||</span> <span class="n">sea</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]</span> <span class="o">==</span> <span class="n">sharkSize</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">nX</span><span class="p">,</span> <span class="n">nY</span><span class="p">));</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]</span> <span class="o">=</span> <span class="n">visited</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">sea</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">sharkSize</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">dis</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">ate</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">]</span> <span class="o">=</span> <span class="n">visited</span><span class="p">[</span><span class="n">nowX</span><span class="p">][</span><span class="n">nowY</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">dis</span> <span class="o">=</span> <span class="n">visited</span><span class="p">[</span><span class="n">nX</span><span class="p">][</span><span class="n">nY</span><span class="p">];</span>
                <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">nX</span><span class="p">,</span> <span class="n">nY</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
    <span class="n">sea</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ate</span> <span class="o">==</span> <span class="n">sharkSize</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sharkSize</span><span class="o">++</span><span class="p">;</span>
        <span class="n">ate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">visited</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">init</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">9</span><span class="p">){</span>
                <span class="n">x</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="n">y</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                <span class="n">sea</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">bfs</span><span class="p">();</span>
        <span class="n">sec</span> <span class="o">+=</span> <span class="n">temp</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">temp</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">sec</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="BFS" /><category term="Try" /><summary type="html"><![CDATA[16236 아기 상어 골드 3]]></summary></entry><entry><title type="html">백준 N과 M (12) [c++]</title><link href="http://localhost:4000/2024/03/03/15666_NM12/" rel="alternate" type="text/html" title="백준 N과 M (12) [c++]" /><published>2024-03-03T10:18:00+09:00</published><updated>2024-03-03T10:28:25+09:00</updated><id>http://localhost:4000/2024/03/03/15666_NM12</id><content type="html" xml:base="http://localhost:4000/2024/03/03/15666_NM12/"><![CDATA[<h1 id="15666-n과-m-12-실버-2">15666 N과 M (12) 실버 2</h1>

<p><a href="https://www.acmicpc.net/problem/15666"> 문제 링크 </a></p>

<h2 id="문제">문제</h2>

<p>N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>

<p>N개의 자연수 중에서 M개를 고른 수열
같은 수를 여러 번 골라도 된다.
고른 수열은 비내림차순이어야 한다.
길이가 K인 수열 A가 A1 ≤ A2 ≤ … ≤ AK-1 ≤ AK를 만족하면, 비내림차순이라고 한다.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>

<p>둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.</p>

<h2 id="출력">출력</h2>

<p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>

<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>

<h2 id="풀이">풀이</h2>

<p>이전 <a href="https://hun9008.github.io/2024/03/02/15658_NM9/"> N과 M (9) </a> 문제와 유사하나,</p>

<p>차이점은</p>

<ol>
  <li>같은 수를 여러 번 골라도 된다.</li>
  <li>비내림차순 이어야 한다.</li>
</ol>

<p>비내림차순은 처음 인풋을 정렬해주기 때문에 별도로 처리할 것이 없고,</p>

<p>같은 수를 여러번 골라도 되므로 이전 문제에서 사용한 visited를 제거하고 이전 값보다 큰 값만 받도록 수정한다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">answer</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ins</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">visited</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="p">};</span>

<span class="kt">void</span> <span class="n">init</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">promising</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">m</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">prev_element</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">prev_element</span> <span class="o">!=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">answer</span><span class="p">[</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
                <span class="n">prev_element</span> <span class="o">=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
                <span class="n">promising</span><span class="p">(</span><span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">ins</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">ins</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ins</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="n">init</span><span class="p">();</span>
    <span class="n">promising</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="back tracking" /><summary type="html"><![CDATA[15666 N과 M (12) 실버 2]]></summary></entry><entry><title type="html">백준 N과 M (9) [c++]</title><link href="http://localhost:4000/2024/03/02/15658_NM9/" rel="alternate" type="text/html" title="백준 N과 M (9) [c++]" /><published>2024-03-02T12:18:00+09:00</published><updated>2024-03-02T12:28:25+09:00</updated><id>http://localhost:4000/2024/03/02/15658_NM9</id><content type="html" xml:base="http://localhost:4000/2024/03/02/15658_NM9/"><![CDATA[<h1 id="15658-n과-m-9-실버-2">15658 N과 M (9) 실버 2</h1>

<p><a href="https://www.acmicpc.net/problem/15663"> 문제 링크 </a></p>

<h2 id="문제">문제</h2>
<p>N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>

<p>N개의 자연수 중에서 M개를 고른 수열</p>

<h2 id="입력">입력</h2>
<p>첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>

<p>둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.</p>

<h2 id="출력">출력</h2>
<p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>

<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>

<h2 id="풀이">풀이</h2>

<p>기존에 N과 M문제들을 풀었던 방식(queue와 vector를 사용)으로 해결하려 했으나, 메모리 초과와 시간초과에 걸렸다.</p>

<p>풀이를 찾아보다 기존 코드와 2가지 차이점이 있었는데</p>

<ol>
  <li>중복수열이 나오는 조건을 찾아 제외</li>
  <li>visited를 사용하는 재귀 사용</li>
</ol>

<p>먼저 1번은 https://m.blog.naver.com/js568/221857286945 에서 힌트를 얻었다.</p>

<blockquote>
  <p>이전 수열의 마지막 항과 새로 추가할 값이 같으면 중복 수열이 된다!</p>
</blockquote>

<blockquote>
  <p>먼저 {9,7,1,9}의 입력(N)이 있을 때, 사전 순으로 정렬하면 {1,7,9,9}</p>

  <p>1 <br />
=&gt; 1-7 (o) <br />
=&gt; 1-9 (o) <br />
=&gt; 1-9 (x) <br />
7 <br />
=&gt; 7-1 (o) <br />
=&gt; 7-9 (o) <br />
=&gt; 7-9 (x) <br />
9 <br />
=&gt; 9-1 (o) <br />
=&gt; 9-7 (o) <br />
=&gt; 9-9 (o) <br /></p>

  <p>1-9 이후 다음에 올 값인 4번 인덱스의 9는 이전 9와 같기 때문에 중복수열이 됨.</p>

  <p>마찬가지로 7-9 다음 9가 같기 때문에 중복수열.</p>
</blockquote>

<p>이 아이디어를 적용해 경우의 수를 줄일 수 있었다.</p>

<p>이후 visited를 사용해 재방문을 방지하고자 재귀를 사용하는 코드로 변경했다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">answer</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ins</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">visited</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="p">};</span>

<span class="kt">void</span> <span class="n">init</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">promising</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">m</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">prev_element</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">prev_element</span> <span class="o">!=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
                <span class="n">prev_element</span> <span class="o">=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">promising</span><span class="p">(</span><span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">ins</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">ins</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ins</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="n">init</span><span class="p">();</span>
    <span class="n">promising</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="back tracking" /><summary type="html"><![CDATA[15658 N과 M (9) 실버 2]]></summary></entry><entry><title type="html">백준 N과 M (8) [c++]</title><link href="http://localhost:4000/2024/03/02/15657_NM8/" rel="alternate" type="text/html" title="백준 N과 M (8) [c++]" /><published>2024-03-02T11:18:00+09:00</published><updated>2024-03-02T11:28:25+09:00</updated><id>http://localhost:4000/2024/03/02/15657_NM8</id><content type="html" xml:base="http://localhost:4000/2024/03/02/15657_NM8/"><![CDATA[<h1 id="15657-n과-m-8-실버-3">15657 N과 M (8) 실버 3</h1>

<p><a href="https://www.acmicpc.net/problem/15657"> 문제 링크 </a></p>

<h2 id="문제">문제</h2>

<p>N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. N개의 자연수는 모두 다른 수이다.</p>

<p>N개의 자연수 중에서 M개를 고른 수열
같은 수를 여러 번 골라도 된다.
고른 수열은 비내림차순이어야 한다.
길이가 K인 수열 A가 A1 ≤ A2 ≤ … ≤ AK-1 ≤ AK를 만족하면, 비내림차순이라고 한다.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>

<p>둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.</p>

<h2 id="출력">출력</h2>

<p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>

<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>

<h2 id="풀이">풀이</h2>

<p>다른 N과 M 문제들과 마찬가지로 백트래킹을 사용하며, queue와 vector를 이용한다. (<a href="https://hun9008.github.io/2024/02/06/15649_NM1/"> N과 M (1) </a>)</p>

<p>차이점은</p>

<ol>
  <li>중복이 가능하고</li>
  <li>비내림차순이어야 한다.</li>
</ol>

<p>중복이 가능하게 하기 위해 중복을 피하려고 사용한 promising함수의 verified를 제거해준다.</p>

<p>비내림차순은 수열이 증가하거나 같아야 하므로 새로운 숫자를 vector에 추가할 때 새로 들어오는 값이 현재 백터의 마지막 값보다 크거나 같은지 확인하면 된다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">queue</span> <span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">answer</span><span class="p">;</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ins</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">promising</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">m</span><span class="p">){</span>
        <span class="n">answer</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">add</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">add</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">add</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
        <span class="n">ins</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="kt">int</span> <span class="n">qsize</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="c1">//cout &lt;&lt; "q_size : " &lt;&lt; qsize &lt;&lt; endl;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">qsize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
            <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">promising</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>

        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">sort</span><span class="p">(</span><span class="n">answer</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">answer</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">answer</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">out</span> <span class="o">=</span> <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">out</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="back tracking" /><summary type="html"><![CDATA[15657 N과 M (8) 실버 3]]></summary></entry><entry><title type="html">백준 N과 M (5) [c++]</title><link href="http://localhost:4000/2024/03/02/15654_NM5/" rel="alternate" type="text/html" title="백준 N과 M (5) [c++]" /><published>2024-03-02T10:18:00+09:00</published><updated>2024-03-02T10:28:25+09:00</updated><id>http://localhost:4000/2024/03/02/15654_NM5</id><content type="html" xml:base="http://localhost:4000/2024/03/02/15654_NM5/"><![CDATA[<h1 id="15654-n과-m-5-실버-3">15654 N과 M (5) 실버 3</h1>

<p><a href="https://www.acmicpc.net/problem/15654"> 문제 링크 </a></p>

<h2 id="문제">문제</h2>
<p>N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. N개의 자연수는 모두 다른 수이다.</p>

<p>N개의 자연수 중에서 M개를 고른 수열</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>

<p>둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.</p>

<h2 id="출력">출력</h2>
<p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>

<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>

<h2 id="풀이">풀이</h2>

<p>모든 경우를 확인해야 하므로 dp보다는 백트래킹이 적절하다.</p>

<p>queue와 promising함수를 이용해 풀 수 있다.</p>

<p>이전 N과 M 문제들과 차이점은 N이 1~N까지의 수가 아니라 N개의 수로 주어진다는 점이 차이점이다.</p>

<p>입력으로 들어온 N개의 숫자를 vector<int> ins 에 저장해두었다가 N과 M (1)과 같은 방법으로 해결 할 수 있다.</int></p>

<p>(<a href="https://hun9008.github.io/2024/02/06/15649_NM1/"> N과 M (1) 풀이 </a>)</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">queue</span> <span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">answer</span><span class="p">;</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ins</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">promising</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">m</span><span class="p">){</span>
        <span class="n">answer</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">varified</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">s</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">==</span> <span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
                <span class="n">varified</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">varified</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
            <span class="n">add</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ins</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">add</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
        <span class="n">ins</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="kt">int</span> <span class="n">qsize</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="c1">//cout &lt;&lt; "q_size : " &lt;&lt; qsize &lt;&lt; endl;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">qsize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
            <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">promising</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>

        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">sort</span><span class="p">(</span><span class="n">answer</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">answer</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">answer</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">out</span> <span class="o">=</span> <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">out</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="back tracking" /><summary type="html"><![CDATA[15654 N과 M (5) 실버 3]]></summary></entry><entry><title type="html">백준 입국심사 [c++]</title><link href="http://localhost:4000/2024/02/22/3079_comingTest/" rel="alternate" type="text/html" title="백준 입국심사 [c++]" /><published>2024-02-22T10:18:00+09:00</published><updated>2024-02-22T10:28:25+09:00</updated><id>http://localhost:4000/2024/02/22/3079_comingTest</id><content type="html" xml:base="http://localhost:4000/2024/02/22/3079_comingTest/"><![CDATA[<h1 id="3079-입국심사-골드-5">3079 입국심사 골드 5</h1>

<p><a href="https://www.acmicpc.net/problem/3079"> 문제 링크 </a></p>

<h2 id="문제">문제</h2>

<p>상근이와 친구들은 오스트레일리아로 여행을 떠났다. 상근이와 친구들은 총 M명이고, 지금 공항에서 한 줄로 서서 입국심사를 기다리고 있다. 입국심사대는 총 N개가 있다. 각 입국심사관이 심사를 하는데 걸리는 시간은 사람마다 모두 다르다. k번 심사대에 앉아있는 심사관이 한 명을 심사를 하는데 드는 시간은 Tk이다.</p>

<p>가장 처음에 모든 심사대는 비어있고, 심사를 할 준비를 모두 끝냈다. 상근이와 친구들은 비행기 하나를 전세내고 놀러갔기 때문에, 지금 심사를 기다리고 있는 사람은 모두 상근이와 친구들이다. 한 심사대에서는 한 번에 한 사람만 심사를 할 수 있다. 가장 앞에 서 있는 사람은 비어있는 심사대가 보이면 거기로 가서 심사를 받을 수 있다. 하지만 항상 이동을 해야 하는 것은 아니다. 더 빠른 심사대의 심사가 끝나길 기다린 다음에 그 곳으로 가서 심사를 받아도 된다.</p>

<p>상근이와 친구들은 모두 컴퓨터 공학과 학생이기 때문에, 어떻게 심사를 받으면 모든 사람이 심사를 받는데 걸리는 시간이 최소가 될지 궁금해졌다.</p>

<p>예를 들어, 두 심사대가 있고, 심사를 하는데 걸리는 시간이 각각 7초와 10초라고 하자. 줄에 서 있는 사람이 6명이라면, 가장 첫 두 사람은 즉시 심사를 받으러 가게 된다. 7초가 되었을 때, 첫 번째 심사대는 비어있게 되고, 세 번째 사람이 그곳으로 이동해서 심사를 받으면 된다. 10초가 되는 순간, 네 번째 사람이 이곳으로 이동해서 심사를 받으면 되고, 14초가 되었을 때는 다섯 번째 사람이 첫 번째 심사대로 이동해서 심사를 받으면 된다. 20초가 되었을 때, 두 번째 심사대가 비어있게 된다. 하지만, 여섯 번째 사람이 그 곳으로 이동하지 않고, 1초를 더 기다린 다음에 첫 번째 심사대로 이동해서 심사를 받으면, 모든 사람이 심사를 받는데 걸리는 시간이 28초가 된다. 만약, 마지막 사람이 1초를 더 기다리지않고, 첫 번째 심사대로 이동하지 않았다면, 모든 사람이 심사를 받는데 걸리는 시간이 30초가 되게 된다.</p>

<p>상근이와 친구들이 심사를 받는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N과 M이 주어진다. (1 ≤ N ≤ 100,000, 1 ≤ M ≤ 1,000,000,000)</p>

<p>다음 N개 줄에는 각 심사대에서 심사를 하는데 걸리는 시간인 Tk가 주어진다. (1 ≤ Tk ≤ 109)</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 상근이와 친구들이 심사를 마치는데 걸리는 시간의 최솟값을 출력한다.</p>

<h2 id="풀이">풀이</h2>

<p>처음에는 그리디로 풀려고 했으나, 제한 조건때문에 제한시간안에 통과하지 못했다.</p>

<p>이분탐색을 이용해야 하는데 시간을 변수로 생각할 수 있다.</p>

<p>left를 1로, right를 가장 오래 걸릴 수 있는 시간(times의 가장 큰 값 * n)으로 두고</p>

<p>이분탐색을 하면서 mid일때, 심사대에서 처리할 수 있는 사람 수를 센다.<br />
그리고 처리할 수 있는 사람이 n을 넘어가면 right를 줄이고(이때 정답 업데이트),<br />
처리할 수 있는 사람이 n보다 작으면 left를 늘려가면서 답을 찾을 수 있다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">long</span> <span class="kt">long</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">times</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">timeSize</span> <span class="o">=</span> <span class="n">times</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

    <span class="n">sort</span><span class="p">(</span><span class="n">times</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">times</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">maxTime</span> <span class="o">=</span> <span class="n">times</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>

    <span class="kt">long</span> <span class="kt">long</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">right</span> <span class="o">=</span> <span class="n">maxTime</span> <span class="o">*</span> <span class="n">n</span><span class="p">;</span>

    <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="c1">// cout &lt;&lt; mid &lt;&lt; endl;</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">person</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">timeSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">person</span> <span class="o">+=</span> <span class="p">(</span><span class="n">mid</span> <span class="o">/</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">times</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">person</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">person</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">answer</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>



    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">times</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">temp</span><span class="p">;</span>
        <span class="n">times</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">times</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="이분탐색" /><summary type="html"><![CDATA[3079 입국심사 골드 5]]></summary></entry><entry><title type="html">백준 웹 브라우저1 [c++]</title><link href="http://localhost:4000/2024/02/19/23294_APC2021_3/" rel="alternate" type="text/html" title="백준 웹 브라우저1 [c++]" /><published>2024-02-19T14:18:00+09:00</published><updated>2024-02-19T14:28:25+09:00</updated><id>http://localhost:4000/2024/02/19/23294_APC2021_3</id><content type="html" xml:base="http://localhost:4000/2024/02/19/23294_APC2021_3/"><![CDATA[<h1 id="23294-웹-브라우저1-골드4">23294 웹 브라우저1 골드4</h1>

<p><a href="https://www.acmicpc.net/problem/23294"> 문제 링크 </a>
APC 2021 3번</p>

<h2 id="문제">문제</h2>
<p>우리는 웹 페이지에 접속할 때 ‘웹 브라우저’를 사용한다. 웹 브라우저에는 크게 뒤로 가기(Backward), 앞으로 가기(Frontward), 웹페이지 접속(Access) 기능이 있다.</p>

<p>사용자가 웹 사이트에 접속하면 컴퓨터의 캐시(cache)공간에 웹페이지 정보가 저장된다. 그리고 뒤로 가기 또는 앞으로 가기 기능을 사용하면 캐시 공간에 저장되어 있던 페이지의 정보를 불러오게 된다. 하지만 캐시 공간은 한정적이기 때문에 무한정 정보를 저장할 수 없다. 그래서 일정 캐시 용량을 초과하게 되면 방문한지 오래된 페이지가 삭제되도록 설계되어 있다. 사용 중인 캐시 용량은 뒤로 가기 공간,앞으로 가기 공간 그리고 현재 접속 중인 페이지가 사용하고 있는 용량의 총합으로 계산된다. 여기에 주헌이가 개발한 웹 브라우저에는 신기한 기능이 있는데, 바로 압축(Compress)이라는 기능이다. 압축 기능은 뒤로 가기 공간에 같은 번호의 페이지가 연속해서 들어있을 때, 이를 하나로 줄일 수 있는 기능이다.</p>

<p>각 기능의 작동방식은 각각 다음과 같다.</p>

<p>뒤로 가기를 실행할 경우
뒤로 가기 공간에 1개 이상의 페이지가 저장되어 있을 때만 2,3번 과정이 실행된다. 0개일 때 이 작업은 무시된다.
현재 보고 있던 웹페이지를 앞으로 가기 공간에 저장한다.
뒤로 가기 공간에서 방문한지 가장 최근의 페이지에 접속한다. 그리고 해당 페이지는 뒤로 가기 공간에서 삭제된다.
앞으로 가기를 실행할 경우
앞으로 가기 공간에 1개 이상의 페이지가 저장되어 있을 때만 2,3번 과정이 실행된다. 0개일 때 이 작업은 무시된다.
현재 보고 있던 페이지를 뒤로 가기 공간에 저장한다.
앞으로 가기 공간에서 방문한지 가장 최근의 페이지에 접속한다. 그리고 해당 페이지는 앞으로 가기 공간에서 삭제된다.
웹 페이지에 접속할 경우
앞으로 가기 공간에 저장된 페이지가 모두 삭제된다. 페이지들이 차지하고 있던 크기만큼 현재 사용 캐시에서 줄어든다.
현재 페이지를 뒤로 가기 공간에 추가하고, 다음에 접속할 페이지가 현재 페이지로 갱신된다. 접속한 페이지의 용량만큼 현재 사용 캐시 용량에 추가된다. 단, 처음으로 웹페이지에 접속하는 경우라면, 현재 페이지를 뒤로 가기 공간에 추가하지 않는다.
3번 과정은 2번 과정에서 최대 캐시 용량을 초과할 경우에만 실행된다. 뒤로 가기 공간에서 방문한 지 가장 오래된 페이지 하나를 삭제하며, 그 페이지가 차지하고 있던 크기가 현재 사용 캐시 용량에서 줄어든다. 이 과정은 현재 사용 캐시 용량이 최대 캐시 용량보다 작거나 같아질 때까지 여러번 수행될 수 있다.
압축을 실행할 경우
뒤로 가기 공간에서 같은 번호의 페이지가 연속해서 2개 이상 등장할 경우, 가장 최근의 페이지 하나만 남기고 나머지는 모두 삭제한다.
삭제된 페이지가 차지하고 있던 용량만큼 현재 사용 캐시에서 줄어든다.
Q개의 작업을 모두 마친 뒤에 현재 접속 중인 페이지와 뒤로 가기 공간, 앞으로 가기 공간에 저장되어 있는 페이지의 번호를 구하여라.</p>

<p>초기 상태에는 뒤로 가기 공간, 앞으로 가기 공간이 모두 비어있으며 어떤 페이지에도 접속해있지 않는 상태이다. 또한 같은 번호의 페이지에 여러번 접속할 수 있으며, 그럴 경우 같은 번호의 페이지이라도 방문 순서는 각기 다르게 취급된다.</p>

<h2 id="입력">입력</h2>
<p>첫째 줄에 접속할 수 있는 웹페이지의 종류의 수 N, 사용자가 수행하는 작업의 개수 Q 와 최대 캐시 용량 C 이 순서대로 주어진다.(1 ≤ N, Q ≤ 2,000, 1 ≤ C ≤ 200,000)</p>

<p>둘째 줄에는 N개의 정수 CAPi 가 주어진다. i 는 웹페이지의 번호이며, i 번째 숫자는 i 번째 웹페이지를 방문할 때 사용하는 캐시 공간의 크기를 의미한다. 각 캐시 공간의 크기는 1 ≤ CAPi  ≤ C  를 만족한다.</p>

<p>셋째 줄부터는 Q개의 작업이 주어지며, 각 작업이 의미하는 바는 다음과 같다.</p>

<p>B : 뒤로 가기를 실행한다.
F : 앞으로 가기를 실행한다.
A i : i 번 웹페이지에 접속한다.
C : 압축을 실행한다.
A(접속)작업이 적어도 한 번은 등장한다.</p>

<h2 id="출력">출력</h2>
<p>3줄에 걸쳐서 출력한다.</p>

<p>첫째 줄에는 현재 접속 중인 페이지의 번호를 출력한다.</p>

<p>둘째 줄에는 뒤로 가기 공간에서 가장 최근에 방문한 순서대로 페이지의 번호를 출력한다. 저장된 페이지가 없다면 -1을 출력한다.</p>

<p>셋째 줄에는 앞으로 가기 공간에서 가장 최근에 방문한 순서대로 페이지의 번호를 출력한다. 저장된 페이지가 없다면 -1을 출력한다.</p>

<h2 id="풀이">풀이</h2>

<p>브라우저에서 앞으로, 뒤로, 접속, 압축에 따라 cache를 처리하는 문제.</p>

<p>뒤로가기 공간(back cache)과 앞으로가기 공간(front cache)가 필요하고 현재 접속중인 페이지는 하나기 때문에 int.</p>

<h3 id="case">Case</h3>
<ol>
  <li>앞으로가거나 뒤로가는 경우에서는 페이지의 공간의 이동만 일어나지 cache에는 변화 없다.</li>
  <li>접속할 경우 front cache를 비워 cache감소, 그리고 현재 페이지를 back cache로 이동 &amp; 새로운 현재 페이지 설정, 그리고 만약 back cache가 초과한다면 오래된 순으로 삭제.</li>
  <li>압축할 경우 back cache의 중복인 페이지를 제거하면 된다.</li>
</ol>

<p>구현을 위해 front cache와 back cache는 vector를 사용했다.</p>

<p>case 1은 조건에 맞게 push와 pop으로 구현하면 됨.</p>

<p>case 2는 우선 front cache에 있는 페이지(크기)만큼 cache를 줄여주고 front cache를 비운다. <br />
그리고 now에 현재 페이지를 설정하고,<br />
back cache가 초과할 경우 가장 오래된 것이 삭제되어야 하기 때문에(vector 구조를 사용했기 때문에)<br />
erase(bachC.begin())처럼 begin과 erase를 사용해 맨 앞의 요소를 삭제한다.</p>

<p>case 3은 우선 현재 cache에서 back cache에 있는 페이지(크기)만큼 cache를 줄여주고,(1)<br />
erase와 unique를 사용해 중복된 요소를 제거해준다.(2)<br />
그리고 다시 back cache에 있는 페이지(크기)만큼 cache를 늘려주면 중복된 것만큼 cache가 줄어들게 된다. (3)<br /></p>

<blockquote>
  <p>초기 cache : 15, backCache : {1,2,3,2,2}</p>

  <p>case 3 과정</p>

  <p>(1) ==&gt; cache : 5 (-10), backCache : {1,2,3,2,2}</p>

  <p>(2) ==&gt; cache : 5 (0), backCache : {1,2,3}</p>

  <p>(3) ==&gt; cache : 11 (+6), backCache : {1,2,3}</p>

  <p>결과 ==&gt; 중복된 {2,2} 만큼(4만큼) cache가 줄어듦.</p>
</blockquote>

<p>이후 출력 조건에 맞게 출력해주면 된다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">usedCache</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">cap</span><span class="p">[</span><span class="mi">2001</span><span class="p">];</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">backC</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">frontC</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">q</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">cap</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">string</span> <span class="n">act</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">act</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">act</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">backC</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">now</span> <span class="o">&lt;=</span> <span class="mi">2000</span><span class="p">){</span>
                    <span class="n">frontC</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
                    <span class="n">now</span> <span class="o">=</span> <span class="n">backC</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
                    <span class="n">backC</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">act</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"F"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">frontC</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">now</span> <span class="o">&lt;=</span> <span class="mi">2000</span><span class="p">){</span>
                    <span class="n">backC</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
                    <span class="n">now</span> <span class="o">=</span> <span class="n">frontC</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
                    <span class="n">frontC</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">act</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">index</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">used</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">frontC</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">used</span> <span class="o">+=</span> <span class="n">cap</span><span class="p">[</span><span class="n">frontC</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
            <span class="p">}</span>
            <span class="n">usedCache</span> <span class="o">-=</span> <span class="n">used</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">usedCache</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">usedCache</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">frontC</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
            <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">backC</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
            <span class="n">usedCache</span> <span class="o">+=</span> <span class="n">cap</span><span class="p">[</span><span class="n">now</span><span class="p">];</span>
            <span class="k">while</span><span class="p">(</span><span class="n">usedCache</span> <span class="o">&gt;</span> <span class="n">c</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">backC</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
                <span class="n">usedCache</span> <span class="o">-=</span> <span class="n">cap</span><span class="p">[</span><span class="n">backC</span><span class="p">.</span><span class="n">front</span><span class="p">()];</span>
                <span class="n">backC</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">backC</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">act</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">backC</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
 
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">backC</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">usedCache</span> <span class="o">-=</span> <span class="n">cap</span><span class="p">[</span><span class="n">backC</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
                <span class="p">}</span> 
                <span class="n">backC</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">backC</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">backC</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">backC</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">backC</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">usedCache</span> <span class="o">+=</span> <span class="n">cap</span><span class="p">[</span><span class="n">backC</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="n">usedCache</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">usedCache</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">now</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">backC</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
        <span class="n">reverse</span><span class="p">(</span><span class="n">backC</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">backC</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">backC</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">backC</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">frontC</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
        <span class="n">reverse</span><span class="p">(</span><span class="n">frontC</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">frontC</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">frontC</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">frontC</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="try" /><summary type="html"><![CDATA[23294 웹 브라우저1 골드4]]></summary></entry><entry><title type="html">백준 아주 서바이벌 [c++]</title><link href="http://localhost:4000/2024/02/19/23293_APC2021_2/" rel="alternate" type="text/html" title="백준 아주 서바이벌 [c++]" /><published>2024-02-19T12:18:00+09:00</published><updated>2024-02-19T12:28:25+09:00</updated><id>http://localhost:4000/2024/02/19/23293_APC2021_2</id><content type="html" xml:base="http://localhost:4000/2024/02/19/23293_APC2021_2/"><![CDATA[<h1 id="23293-아주-서바이벌-실버1">23293 아주 서바이벌 실버1</h1>

<p><a href="https://www.acmicpc.net/problem/23293"> 문제 링크 </a>
APC 2021 2번</p>

<h2 id="문제">문제</h2>
<p>때는 2021년, 대한민국에는 ‘아주 서바이벌’이라는 온라인 게임이 대 유행 중이다. 이 게임은 바다 한가운데의 섬, 아주 아일랜드에서 벌어지는 배틀로얄 게임으로 플레이어들은 아주 아일랜드의 여러 지역을 돌아다니며 아이템을 획득하고, 조합해 다른 플레이어와 싸우게 된다.</p>

<p>상민이는 아주 서바이벌의 서버 개발자다. 이 게임이 흥행하면서 부정행위를 저지르는 플레이어가 늘어나자, 보다 못한 상민이는 게임의 로그를 분석해 부정행위를 전부 찾아내기로 했다.</p>

<p>아주 서바이벌 지도</p>

<p><img src="/ajsurvive.png" /></p>

<p>아주 서바이벌에는 1번부터 53번 지역까지 총 53개의 지역이 존재하며, 모든 플레이어가 1번 지역(정문)에 모인 채로 게임이 시작된다.</p>

<p>플레이어들은 이동, 획득, 조합, 공격 총 네 가지 종류의 행동을 할 수 있다.</p>

<p>이동 : 플레이어가 현재 위치한 지역에서 다른 지역으로 이동한다. 즉, 현재 위치한 지역으로는 이동하지 않는다.
획득 : 플레이어가 현재 위치한 지역에서만 획득할 수 있는 소재 아이템 1개를 획득한다. 즉, x번 지역에서는 x번 소재 아이템을 획득한다. 아이템의 수량은 충분해 부족할 일이 없으며, 한 플레이어가 같은 아이템을 여러 번 획득할 수 있다.
조합 : 플레이어가 가지고 있는 서로 다른 종류의 두 소재 아이템을 1개씩 사용해 장비를 만든다.
공격 : 플레이어가 다른 플레이어 한 명을 공격한다. 오직 같은 지역에 있는 플레이어만 공격할 수 있다.
위 행동들에서 상민이는 아래 세 가지 경우를 부정행위라고 판단했다.</p>

<p>플레이어가 현재 위치한 지역에서 얻을 수 없는 소재 아이템을 획득한 경우
플레이어가 가지고 있지 않은 소재 아이템을 사용해 조합하는 경우
플레이어가 다른 지역에 있는 상대 플레이어를 공격하는 경우
상민: 부정행위로 보이는 모든 로그를 기록할 거야. 하지만, 공격할 때 위치를 속이는 것은 참을 수 없어. 그런 플레이어는 차단할 거야!</p>

<p>게임 로그는 다음과 같이 주어진다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 11 M 13
2 13 M 15
3 11 F 13
4 11 M 3
5 11 F 3
6 11 C 3 13
7 13 A 11
8 13 F 15
9 13 F 16
10 13 C 15 16
</code></pre></div></div>

<p>게임 로그는 “[번호] [플레이어 번호] [행동 코드] [행동 인자]”의 형식으로 기록된다.</p>

<p>번호 : 로그의 줄 번호이다. 1번부터 T번까지 순서대로 주어진다.
플레이어 번호 : 각 플레이어가 가지는 고유한 번호이다. 1번부터 N번 사이의 번호를 가지게 된다.
행동 코드 : 플레이어가 한 행동이다. 이동은 M(Move), 획득은 F(Farming), 조합은 C(Crafting), 공격은 A(Attack)이다.
행동 인자 : 플레이어가 한 행동과 관련된 정보이다. 이동은 새로 이동한 지역의 번호, 획득은 획득한 소재 아이템의 번호, 조합은 조합에 사용된 두 소재 아이템의 번호, 공격은 공격한 플레이어 번호를 행동 인자로 가진다.
부정행위로 획득한 소재 아이템 역시 획득한 것으로 인정되며, 부정행위로 조합 시 가지고 있는 소재 아이템만이 사용된다.</p>

<p>위 로그를 예로 들면, 11번 플레이어는 13번 지역으로 이동하여(1) 13번 소재 아이템을 획득하고(3), 이후 3번 지역으로 이동하여(4) 3번 소재 아이템을 획득해(5) 3번과 13번 소재 아이템을 조합했다(6). 모두 정상적인 행동이다.</p>

<p>13번 플레이어는 15번 지역으로 이동한 후(2), 3번 지역에 있는 11번 플레이어를 공격했다(7). 다른 지역에 있는 플레이어를 공격하는 것은 부정행위이기 때문에 7번 로그를 기록하고, 공격 부정행위이기 때문에 13번 플레이어는 차단해야 한다. 이어서, 15번 소재 아이템을 획득하고(8), 16번 소재 아이템을 획득 후에(9), 15번과 16번 소재 아이템을 조합했다(10). 15번 지역에서 16번 소재 아이템을 획득하는 것은 부정행위이기 때문에 9번 로그를 기록한다. 하지만, 16번 소재 아이템을 획득한 것은 인정되기 때문에 10번 로그는 부정행위가 아니다.</p>

<p>상민이를 위해 게임의 로그를 분석하고, 기록된 부정행위와 차단할 플레이어를 상민에게 알려주자.</p>

<h2 id="입력">입력</h2>
<p>첫 번째 줄에는 게임 로그의 줄 수 T, 플레이어 수 N이 주어진다. (1 ≤ T ≤ 200,000, 1 ≤ N ≤ 100,000)</p>

<p>두 번째 줄부터 T개 줄 동안 게임 로그가 입력된다. 각 줄의 게임 로그는 번호, 플레이어 번호, 행동 코드, 행동 인자가 공백 한 칸을 사이에 두고 주어진다.</p>

<h2 id="출력">출력</h2>
<p>첫 번째 줄에 부정행위로 기록된 로그의 수를 출력한다. 기록된 로그가 없다면 “0”을 출력한다.</p>

<p>부정행위로 기록된 로그가 있다면 다음 줄에 기록된 로그의 번호를 공백 한 칸씩 띄어서 오름차순으로 출력한다. 기록된 로그가 없다면 해당 줄은 출력하지 않는다.</p>

<p>다음 줄에 차단할 플레이어 수를 출력한다. 차단할 플레이어가 없다면 “0”을 출력한다.</p>

<p>차단할 플레이어가 있다면 다음 줄에는 차단할 플레이어의 번호를 공백 한 칸씩 띄어서 오름차순으로 출력한다. 한 플레이어가 여러 번 부정행위를 저지르더라도 한 번만 출력하며, 차단할 플레이어가 없다면 해당 줄은 출력하지 않는다.</p>

<h2 id="풀이">풀이</h2>

<p>게임의 로그를 보고 부정행위로그를 찾고, 차단할 플레이어를 찾는 문제이다.</p>

<p>게임 규칙에 따라 player는 위치값(1개)과 인벤토리(여러 개, 중복가능)가 필요하다.<br />
playerInven[i] : i 플레이어가 가진 아이템들. (vector)</p>

<p>playerPos[i] : i 플레이어의 현재 위치.</p>

<p>이제 입력로그를 하나씩 입력받으면서 A,M,C,F일 때 조건에 맞게 부정행위를 찾아 errorLog vector에 넣는다.
그리고 A의 경우에는 에러임과 동시에 차단해야할 플레이어이기 때문에 errorPlayer vector에 넣는다.</p>

<p>모든 로그를 입력받고 errorLog와 errorPlayer를 출력한다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">playerInven</span><span class="p">[</span><span class="mi">100001</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">playerPos</span><span class="p">[</span><span class="mi">100001</span><span class="p">];</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">errorLog</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">errorPlayer</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100001</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">playerPos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">playerNum</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">active</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">num</span> <span class="o">&gt;&gt;</span> <span class="n">playerNum</span> <span class="o">&gt;&gt;</span> <span class="n">active</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">active</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">;</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">item1</span> <span class="o">&gt;&gt;</span> <span class="n">item2</span><span class="p">;</span>
            <span class="c1">// playerInven[playerNum].push_back()</span>
            <span class="k">auto</span> <span class="n">iter1</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span> <span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">end</span><span class="p">(),</span> <span class="n">item1</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">iter1</span> <span class="o">==</span> <span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">end</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">errorLog</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
                <span class="c1">// errorPlayer.push_back(playerNum);</span>
            <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
                <span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">erase</span><span class="p">(</span><span class="n">iter1</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">auto</span> <span class="n">iter2</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span> <span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">end</span><span class="p">(),</span> <span class="n">item2</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">iter2</span> <span class="o">==</span> <span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">end</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">errorLog</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
                <span class="c1">// errorPlayer.push_back(playerNum);</span>
            <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
                <span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">erase</span><span class="p">(</span><span class="n">iter2</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">act</span><span class="p">;</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">act</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">active</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"M"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">playerPos</span><span class="p">[</span><span class="n">playerNum</span><span class="p">]</span> <span class="o">=</span> <span class="n">act</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">active</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"F"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">playerInven</span><span class="p">[</span><span class="n">playerNum</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">act</span><span class="p">);</span>

                <span class="k">if</span><span class="p">(</span><span class="n">playerPos</span><span class="p">[</span><span class="n">playerNum</span><span class="p">]</span> <span class="o">!=</span> <span class="n">act</span><span class="p">){</span>
                    <span class="n">errorLog</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
                    <span class="c1">// errorPlayer.push_back(playerNum);</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">active</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">playerPos</span><span class="p">[</span><span class="n">act</span><span class="p">]</span> <span class="o">!=</span> <span class="n">playerPos</span><span class="p">[</span><span class="n">playerNum</span><span class="p">]){</span>
                    <span class="n">errorLog</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
                    <span class="n">errorPlayer</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">playerNum</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">if</span><span class="p">(</span><span class="n">errorLog</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"0"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">errorLog</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">errorLog</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">errorLog</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">errorLog</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">errorLog</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">errorLog</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">errorLog</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">errorLog</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">errorLog</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">errorPlayer</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"0"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">errorPlayer</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">errorPlayer</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">errorPlayer</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">errorPlayer</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">errorPlayer</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">errorPlayer</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">errorPlayer</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">errorPlayer</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">errorPlayer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>



    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="try" /><summary type="html"><![CDATA[23293 아주 서바이벌 실버1]]></summary></entry><entry><title type="html">백준 코딩 바이오리듬 [c++]</title><link href="http://localhost:4000/2024/02/19/23292_APC2021_1/" rel="alternate" type="text/html" title="백준 코딩 바이오리듬 [c++]" /><published>2024-02-19T11:18:00+09:00</published><updated>2024-02-19T11:18:25+09:00</updated><id>http://localhost:4000/2024/02/19/23292_APC2021_1</id><content type="html" xml:base="http://localhost:4000/2024/02/19/23292_APC2021_1/"><![CDATA[<h1 id="23292-코딩-바이오리듬-브론즈2">23292 코딩 바이오리듬 브론즈2</h1>

<p><a href="https://www.acmicpc.net/problem/23292"> 문제 링크 </a>
APC 2021 1번</p>

<h2 id="문제">문제</h2>

<p>바이오리듬(biorhythm)이라는 이론을 들어본 적 있는가? 바이오리듬은 인체에 신체,감성,지성의 세가지 주기가 생년월일의 입력에 따라 어떤 패턴으로 나타나고, 이 패턴의 조합에 따라 능력이나 활동 효율에 차이가 있다는 주장이다.</p>

<p>주헌이는 날마다 달라지는 본인의 코딩 실력도 혹시 바이오리듬의 영향이 아닐까하는 의구심이 들어 수년간의 연구를 진행했다. 그 결과, 코딩과 바이오리듬 사이에 밀접한 연관이 있다는 사실을 발견했고, 주헌이는 이를 코딩 바이오리듬이라는 새로운 개념을 정의하기로 했다. 주헌이가 발견한 코딩 바이오리듬의 값은 생년월일과 날짜를 바탕으로 다음과 같이 계산된다.</p>

<p>‘연도’를 
$Y(y)$, ‘월’을 
$M(m)$, ‘일’을 
$D(d)$ 의 형식이라고 했을 때, 자신의 생일은 “
$YYYY : MM : DD$”로, 자신이 코딩할 날짜는”
$yyyy : mm : dd$” 로 정의하고, 편의상       “
$Y_1Y_2Y_3Y_4 : M_1M_2 : D_1D_2$”, “
$y_1y_2y_3y_4 : m_1m_2 : d_1d_2$” 라고 하자. 이때 코딩 바이오리듬의 값은 아래와 공식에 따라 구할 수 있다.</p>

<p> 
\(\displaystyle \sum_{i=1}^4 {(Y_i-y_i})^2 \times \sum_{j=1}^2 {(M_j-m_j})^2 \times \sum_{k=1}^2 {(D_k-d_k})^2\) </p>

<p>예를 들어, 자신의 생년월일이 2000년 01월 01일 이고, 코딩할 날짜가 2021년 10월 30일 일 때 코딩 바이오리듬의 값은 아래와 공식에 따라 계산된다.</p>

<p> 
$Y_1Y_2Y_3Y_4 : M_1M_2 : D_1D_2 = 2000 : 01 : 01$ </p>

<p> 
$y_1y_2y_3y_4 : m_1m_2 : d_1d_2 = 2021 : 10 : 30$ </p>

<p>코딩 바이오리듬  
$={(2-2)^2+(0-0)^2+(0-2)^2+(0-1)^2}  \times {(0-1)^2+(1-0)^2} \times {(0-3)^2+(1-0)^2} $ </p>

<p> 
$= 5 \times 2 \times 10 = 100$ </p>

<p>누군가의 생년월일과 그 사람이 코딩할 N 일의 날짜가 주어질 때, 날짜 중에서 그 사람의 코딩 바이오리듬이 가장 높은 날의 날짜를 출력하여라. 가장 높은 값을 가지는 날짜가 여러 개라면, 그 중에서 가장 빠른 날짜를 출력한다.</p>

<h2 id="입력">입력</h2>
<p>첫 번째 줄에 사람의 생년월일이 주어진다.</p>

<p>두 번째 줄에 그 사람이 코딩할 날짜의 일수 N 이 주어진다. ( 2 ≤ N ≤ 1000 )</p>

<p>세 번째 줄부터 이후 N 개의 줄에 걸쳐서 코딩할 날짜가 주어진다. 코딩할 날짜는 반드시 생년월일 이후임이 보장되며, 같은 날짜가 2개 이상 주어지지 않는다.</p>

<p>모든 날짜 형식은 
$YYYYMMDD$ 형태로 주어지며, 1000년 01월 01일부터 9999년 12월 31일까지 태양력상으로 실제로 존재하는 날짜만 입력으로 주어진다.</p>

<h2 id="출력">출력</h2>
<p>입력 받은 코딩할 날짜 중에서 코딩 바이오리듬이 가장 높은 날의 날짜를 
$YYYYMMDD$ 형태로 출력한다.</p>

<p>가장 높은 값을 가지는 날이 여러 개라면, 그 중에서 가장 빠른 날짜를 출력한다.</p>

<h2 id="풀이">풀이</h2>

<p>코딩 바이오리듬은 생일과 날짜에 따라 주어진다.</p>

<p>문제에서 생일과 날짜가 주어지면 코딩 바이오리듬이 가장 높은 날짜를 찾으면된다. (바이오리듬이 같을 경우 날짜 빠른 순)</p>

<p>바이오리듬은 주어진 공식대로 구하면 된다.</p>

<p>map을 사용해 바이오리듬이 가장 큰 날을 찾을 건데, 바이오리듬 값을 key로, 해당 날짜 string을 value로 하는 map을 선언한다.</p>

<p>그리고 map에서 key값이 가장 큰 날짜를 vector<string>에 저장해, 날짜 순으로 sort해 출력하면 해결가능하다.</string></p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">string</span> <span class="n">birth</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">bioValue</span><span class="p">(</span><span class="n">string</span> <span class="n">day</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">y</span> <span class="o">+=</span> <span class="p">(</span><span class="n">birth</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">day</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">birth</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">day</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">m</span> <span class="o">+=</span> <span class="p">(</span><span class="n">birth</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">day</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">birth</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">day</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">d</span> <span class="o">+=</span> <span class="p">(</span><span class="n">birth</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">day</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">birth</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">day</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="n">m</span> <span class="o">*</span> <span class="n">d</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">birth</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">days</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">string</span> <span class="n">tDay</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tDay</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">bioValue</span><span class="p">(</span><span class="n">tDay</span><span class="p">);</span>
        <span class="n">days</span><span class="p">[</span><span class="n">value</span><span class="p">]</span> <span class="o">=</span> <span class="n">tDay</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">maxDay</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">prev</span><span class="p">(</span><span class="n">days</span><span class="p">.</span><span class="n">end</span><span class="p">())</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">days</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">days</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">max</span> <span class="o">==</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">maxDay</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">sort</span><span class="p">(</span><span class="n">maxDay</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">maxDay</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">maxDay</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="math" /><category term="try" /><summary type="html"><![CDATA[23292 코딩 바이오리듬 브론즈2]]></summary></entry><entry><title type="html">백준 전화번호 목록 [c++]</title><link href="http://localhost:4000/2024/02/18/5052_phoneNumber/" rel="alternate" type="text/html" title="백준 전화번호 목록 [c++]" /><published>2024-02-18T21:18:00+09:00</published><updated>2024-02-18T21:28:25+09:00</updated><id>http://localhost:4000/2024/02/18/5052_phoneNumber</id><content type="html" xml:base="http://localhost:4000/2024/02/18/5052_phoneNumber/"><![CDATA[<h1 id="5052-전화번호-목록-골드-5">5052 전화번호 목록 골드 5</h1>

<p><a href="https://www.acmicpc.net/submit/5052/73629017"> 문제 링크 </a></p>

<h2 id="문제">문제</h2>

<p>전화번호 목록이 주어진다. 이때, 이 목록이 일관성이 있는지 없는지를 구하는 프로그램을 작성하시오.</p>

<p>전화번호 목록이 일관성을 유지하려면, 한 번호가 다른 번호의 접두어인 경우가 없어야 한다.</p>

<p>예를 들어, 전화번호 목록이 아래와 같은 경우를 생각해보자</p>

<p>긴급전화: 911
상근: 97 625 999
선영: 91 12 54 26
이 경우에 선영이에게 전화를 걸 수 있는 방법이 없다. 전화기를 들고 선영이 번호의 처음 세 자리를 누르는 순간 바로 긴급전화가 걸리기 때문이다. 따라서, 이 목록은 일관성이 없는 목록이다.</p>

<h2 id="입력">입력</h2>
<p>첫째 줄에 테스트 케이스의 개수 t가 주어진다. (1 ≤ t ≤ 50) 각 테스트 케이스의 첫째 줄에는 전화번호의 수 n이 주어진다. (1 ≤ n ≤ 10000) 다음 n개의 줄에는 목록에 포함되어 있는 전화번호가 하나씩 주어진다. 전화번호의 길이는 길어야 10자리이며, 목록에 있는 두 전화번호가 같은 경우는 없다.</p>

<h2 id="출력">출력</h2>
<p>각 테스트 케이스에 대해서, 일관성 있는 목록인 경우에는 YES, 아닌 경우에는 NO를 출력한다.</p>

<h2 id="풀이">풀이</h2>

<p>전화번호 부에서 접두사가 일치하는지 여부를 조사하는 문제이다.</p>

<p>처음에는 map을 사용해 전화번호부를 저장하고 (저장되면 크기 순으로 정렬됨) 크기가 자신보다 큰 번호의 접두사 여부를 확인하는 2중 for문으로 코드를 짰다.(아래 코드 1)</p>

<p>그런데 시간초과가 되어, map에 대해 찾아보니 unordered map을 알게 됬다.<br />
unordered_map은 해쉬테이블로 구현한 자료구조로 탐색 시간복잡도는 O(1)이고<br />
map은 Binary Search Tree로 탐색 시간 복잡도는 O(log n)이다.<br />
따라서 굳이 정렬될 필요가 없다면 데이터 양이 많을 경우 unordered map이 훨씬 유리하다.</p>

<p><a href="https://math-coding.tistory.com/31"> unordered map </a></p>

<p>또한 substring을 찾는 코드를 구현하지 않아도, string.h에 substr함수가 존재한다는 것을 알게 됬다.</p>

<p><a href="https://psychoria.tistory.com/773"> substr </a></p>

<p>map을 사용하는 코드를 unordered map으로 수정하니, 시간초과가 해결되었다. (코드 2)</p>

<h2 id="코드-1map을-사용한-2중-for문">코드 1(map을 사용한 2중 for문)</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    
    <span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">verified</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">string</span> <span class="n">phone</span><span class="p">;</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">phone</span><span class="p">;</span>
            <span class="n">book</span><span class="p">[</span><span class="n">phone</span><span class="p">]</span> <span class="o">=</span> <span class="n">phone</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">book</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">prev</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">end</span><span class="p">());</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">string</span> <span class="n">head</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">next_iter</span> <span class="o">=</span> <span class="n">next</span><span class="p">(</span><span class="n">iter</span><span class="p">);</span> <span class="n">next_iter</span> <span class="o">!=</span> <span class="n">book</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">next_iter</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">string</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">next_iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">cmp_size</span> <span class="o">=</span> <span class="n">next_iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">cmp_size</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">){</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">cmp</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                        <span class="n">verified</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">verified</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">verified</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"NO"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"YES"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">book</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>

    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="코드-2-unordered-map--substr">코드 2 (unordered map + substr)</h2>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unordered_map&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">phone</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">verified</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">string</span> <span class="n">number</span><span class="p">;</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">number</span><span class="p">;</span>
            <span class="n">phone</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
            <span class="n">book</span><span class="p">[</span><span class="n">number</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">phone</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">phone</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">string</span> <span class="n">subs</span> <span class="o">=</span> <span class="n">phone</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="n">subs</span><span class="p">]){</span>
                    <span class="n">verified</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="n">verified</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"NO"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"YES"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">book</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
        <span class="n">phone</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>

    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>Hun</name></author><category term="PS" /><category term="map" /><category term="string" /><category term="hash" /><summary type="html"><![CDATA[5052 전화번호 목록 골드 5]]></summary></entry></feed>